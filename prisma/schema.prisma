generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
   id                  String               @id @default(cuid())
   name                String?
   username            String?              @unique
   bio                 String?
   email               String?              @unique
   emailVerified       DateTime?            @map("email_verified")
   password            String?
   posts               Post[]
   comments            Comment[]
   bookmarks           Bookmark[]
   groups              InGroups[]
   accounts            Account[]
   sessions            Session[]
   ownedGroups         Group[]              @relation("GroupOwner")
   userProfilePictures UserProfilePictures?
   groupViewed         GroupView[]
   notifications       Notification[]
   postViewed          PostViews[]

   createdReports  Report[] @relation("ReportCreator")
   receivedReports Report[] @relation("ReportedUser")

   @@map("users")
}

model CodeReset {
   id     String   @id @default(cuid())
   code   String   @unique
   email  String
   expiry DateTime

   @@map("code_reset_password")
}

model CodeVerifyAccount {
   id     String   @id @default(cuid())
   code   String   @unique
   email  String
   expiry DateTime

   @@map("code_verify_account")
}

model Notification {
   id          String   @id @default(cuid())
   title       String
   description String?
   image       String?
   link        String?
   viewed      Boolean  @default(false)
   createdAt   DateTime @default(now())

   user   User   @relation(fields: [userId], references: [id])
   userId String

   @@map("notifications")
}

model Report {
   id             Int      @id @default(autoincrement())
   title          String
   content        String?
   creatorId      String
   reportedUserId String
   creator        User     @relation("ReportCreator", fields: [creatorId], references: [id])
   reportedUser   User     @relation("ReportedUser", fields: [reportedUserId], references: [id])
   createdAt      DateTime @default(now())
   updatedAt      DateTime @updatedAt

   @@map("report")
}

model UserProfilePictures {
   id     String  @id @default(cuid())
   userId String  @unique
   user   User    @relation(fields: [userId], references: [id])
   avatar String?
   banner String?

   @@map("user_profile_pics")
}

model Post {
   id        String      @id @default(cuid())
   title     String
   content   String
   author    User        @relation(fields: [authorId], references: [id])
   authorId  String
   media     String[]    @default([])
   comments  Comment[]
   bookmarks Bookmark[]
   postMedia PostMedia[]
   postViews PostViews[]
   group     Group       @relation(fields: [groupId], references: [id])
   groupId   String
   createdAt DateTime    @default(now())

   @@map("posts")
}

model PostViews {
   id       String   @id @default(cuid())
   viewedAt DateTime @default(now())

   post     Post   @relation(fields: [postId], references: [id])
   postId   String
   viewer   User   @relation(fields: [viewerId], references: [id])
   viewerId String

   @@unique([postId, viewerId])
   @@map("post_views")
}

model PostMedia {
   id     String @id @default(cuid())
   post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
   postId String
   image  String
   index  Int

   @@map("post_media")
}

model Comment {
   id        String         @id @default(cuid())
   text      String
   author    User           @relation(fields: [authorId], references: [id])
   authorId  String
   post      Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
   postId    String?
   createdAt DateTime       @default(now())
   children  Comment[]      @relation("CommentToComment")
   parent    Comment?       @relation("CommentToComment", fields: [parentId], references: [id])
   parentId  String?
   media     CommentMedia[]
   medias    String[]       @default([])

   @@map("comments")
}

model CommentMedia {
   id String @id @default(cuid())

   image     String
   index     Int
   commentId String
   Comment   Comment @relation(fields: [commentId], references: [id])

   @@map("comment_media")
}

model Bookmark {
   id        String   @id @default(cuid())
   user      User     @relation(fields: [userId], references: [id])
   userId    String
   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
   postId    String
   createdAt DateTime @default(now())

   @@unique([postId, userId])
   @@map("bookmarks")
}

model InGroups {
   id      String @id @default(cuid())
   user    User   @relation(fields: [userId], references: [id])
   userId  String
   group   Group  @relation(fields: [groupId], references: [id])
   groupId String

   @@unique([groupId, userId])
   @@map("in_groups")
}

model Group {
   id               String            @id @default(cuid())
   name             String            @unique
   groupName        String?
   description      String?
   members          InGroups[]
   posts            Post[]
   owner            User              @relation("GroupOwner", fields: [ownerId], references: [id])
   ownerId          String
   categories       String[]          @default([])
   banner           String?
   logo             String?
   groupProfilePics GroupProfilePics?
   groupViews       GroupView[]

   @@map("groups")
}

model GroupView {
   id       String   @id @default(cuid())
   viewedAt DateTime @default(now())

   group    Group  @relation(fields: [groupId], references: [id])
   groupId  String
   viewer   User   @relation(fields: [viewerId], references: [id])
   viewerId String

   @@unique([groupId, viewerId])
   @@map("group_views")
}

model GroupProfilePics {
   id      String  @id @default(cuid())
   groupId String  @unique
   group   Group   @relation(fields: [groupId], references: [id])
   logo    String?
   banner  String?

   @@map("group_profile_pics")
}

// Bullshit

model Account {
   id                String  @id @default(cuid())
   userId            String  @map("user_id")
   type              String
   provider          String
   providerAccountId String  @map("provider_account_id")
   refresh_token     String? @db.Text
   access_token      String? @db.Text
   expires_at        Int?
   token_type        String?
   scope             String?
   id_token          String? @db.Text
   session_state     String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
   @@map("accounts")
}

model Session {
   id           String   @id @default(cuid())
   sessionToken String   @unique @map("session_token")
   userId       String   @map("user_id")
   expires      DateTime
   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("sessions")
}

model VerificationToken {
   identifier String
   token      String   @unique
   expires    DateTime

   @@unique([identifier, token])
   @@map("verification_tokens")
}
