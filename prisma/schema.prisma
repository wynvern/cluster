generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
   id            String         @id @default(cuid())
   name          String?
   username      String?        @unique
   bio           String?
   email         String?        @unique
   emailVerified DateTime?      @map("email_verified")
   password      String?
   image         String?
   banner        String?
   posts         Post[]
   comments      Comment[]
   bookmarks     Bookmark[]
   groups        InGroup[]
   accounts      Account[]
   sessions      Session[]
   ownedGroups   Group[]        @relation("GroupOwner")
   groupViewed   GroupView[]
   notifications Notification[]
   postViewed    PostView[]

   createdReports  Report[] @relation("ReportCreator")
   receivedReports Report[] @relation("ReportedUser")

   @@map("users")
}

model CodeReset {
   id     String   @id @default(cuid())
   code   String   @unique
   email  String
   expiry DateTime

   @@map("code_reset_password")
}

model CodeVerifyAccount {
   id     String   @id @default(cuid())
   code   String   @unique
   email  String
   expiry DateTime

   @@map("code_verify_account")
}

model Notification {
   id          String   @id @default(cuid())
   title       String
   description String?
   image       String?
   link        String?
   viewed      Boolean  @default(false)
   createdAt   DateTime @default(now()) @map("created_at")

   user   User   @relation(fields: [userId], references: [id])
   userId String @map("user_id")

   @@map("notifications")
}

model Report {
   id             Int      @id @default(autoincrement())
   title          String
   content        String?
   creatorId      String   @map("creator_id")
   reportedUserId String   @map("reported_user_id")
   creator        User     @relation("ReportCreator", fields: [creatorId], references: [id])
   reportedUser   User     @relation("ReportedUser", fields: [reportedUserId], references: [id])
   createdAt      DateTime @default(now()) @map("created_at")
   updatedAt      DateTime @updatedAt

   @@map("report")
}

model Post {
   id        String     @id @default(cuid())
   title     String
   content   String
   author    User       @relation(fields: [authorId], references: [id])
   authorId  String     @map("author_id")
   media     String[]   @default([])
   document  String[]   @default([])
   comments  Comment[]
   bookmarks Bookmark[]
   postView  PostView[]
   group     Group      @relation(fields: [groupId], references: [id])
   groupId   String     @map("group_id")
   createdAt DateTime   @default(now())

   @@map("posts")
}

model PostView {
   id       String   @id @default(cuid())
   viewedAt DateTime @default(now()) @map("viewed_at")

   post     Post   @relation(fields: [postId], references: [id])
   postId   String @map("post_id")
   viewer   User   @relation(fields: [viewerId], references: [id])
   viewerId String @map("viewer_id")

   @@unique([postId, viewerId])
   @@map("post_view")
}

model Comment {
   id        String    @id @default(cuid())
   text      String
   author    User      @relation(fields: [authorId], references: [id])
   authorId  String    @map("author_id")
   post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
   postId    String?   @map("post_id")
   createdAt DateTime  @default(now())
   children  Comment[] @relation("CommentToComment")
   parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
   parentId  String?   @map("parent_id")
   media     String[]  @default([])
   document  String[]  @default([])

   @@map("comments")
}

model Bookmark {
   id        String   @id @default(cuid())
   user      User     @relation(fields: [userId], references: [id])
   userId    String   @map("user_id")
   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
   postId    String   @map("post_id")
   createdAt DateTime @default(now())

   @@unique([postId, userId])
   @@map("bookmarks")
}

model InGroup {
   id      String @id @default(cuid())
   user    User   @relation(fields: [userId], references: [id])
   userId  String @map("user_id")
   group   Group  @relation(fields: [groupId], references: [id])
   groupId String @map("group_id")

   @@unique([groupId, userId])
   @@map("in_group")
}

model Group {
   id          String      @id @default(cuid())
   name        String?
   groupname   String      @unique
   description String?
   members     InGroup[]
   posts       Post[]
   owner       User        @relation("GroupOwner", fields: [ownerId], references: [id])
   ownerId     String      @map("owner_id")
   categories  String[]    @default([])
   image       String?
   banner      String?
   groupViews  GroupView[]

   @@map("group")
}

model GroupView {
   id       String   @id @default(cuid())
   viewedAt DateTime @default(now())

   group    Group  @relation(fields: [groupId], references: [id])
   groupId  String @map("group_id")
   viewer   User   @relation(fields: [viewerId], references: [id])
   viewerId String @map("viewer_id")

   @@unique([groupId, viewerId])
   @@map("group_view")
}

// Bullshit

model Account {
   id                String  @id @default(cuid())
   userId            String  @map("user_id")
   type              String
   provider          String
   providerAccountId String  @map("provider_account_id")
   refresh_token     String? @db.Text
   access_token      String? @db.Text
   expires_at        Int?
   token_type        String?
   scope             String?
   id_token          String? @db.Text
   session_state     String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
   @@map("account")
}

model Session {
   id           String   @id @default(cuid())
   sessionToken String   @unique @map("session_token")
   userId       String   @map("user_id")
   expires      DateTime
   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("session")
}

model VerificationToken {
   identifier String
   token      String   @unique
   expires    DateTime

   @@unique([identifier, token])
   @@map("verification_token")
}
